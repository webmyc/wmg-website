---
// AudioToggle component for background audio control
---

<div id="audio-toggle" class="fixed top-4 right-4 sm:top-6 sm:right-6 z-50">
  <button
    id="audio-btn"
    class="bg-wmg-bg/80 backdrop-blur-sm border border-wmg-text/20 rounded-full p-3 text-wmg-text hover:bg-wmg-gold hover:text-wmg-bg transition-all duration-300 group min-w-[48px] min-h-[48px]"
    aria-label="Toggle background audio"
    title="Toggle background audio"
  >
    <svg id="audio-on-icon" class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
      <path d="M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z"/>
    </svg>
    <svg id="audio-off-icon" class="w-5 h-5 hidden" fill="currentColor" viewBox="0 0 24 24">
      <path d="M16.5 12c0-1.77-1.02-3.29-2.5-4.03v2.21l2.45 2.45c.03-.2.05-.41.05-.63zm2.5 0c0 .94-.2 1.82-.54 2.64l1.51 1.51C20.63 14.91 21 13.5 21 12c0-4.28-2.99-7.86-7-8.77v2.06c2.89.86 5 3.54 5 6.71zM4.27 3L3 4.27 7.73 9H3v6h4l5 5v-6.73l4.25 4.25c-.67.52-1.42.93-2.25 1.18v2.06c1.38-.31 2.63-.95 3.69-1.81L19.73 21 21 19.73l-9-9L4.27 3zM12 4L9.91 6.09 12 8.18V4z"/>
    </svg>
  </button>
  
  <div id="audio-status" class="absolute -bottom-10 left-1/2 transform -translate-x-1/2 bg-wmg-bg/90 backdrop-blur-sm text-wmg-text text-xs px-2 py-1 rounded opacity-0 transition-opacity duration-300 pointer-events-none">
    <span id="audio-status-text">Audio On</span>
  </div>
</div>

<audio id="background-audio" loop preload="metadata" class="hidden">
  <source src="/audio/background.mp3" type="audio/mpeg">
</audio>

<script>
  import { trackAudioEvent } from '../lib/analytics.ts';
  
  document.addEventListener('DOMContentLoaded', function() {
    const audioToggle = document.getElementById('audio-toggle');
    const audioBtn = document.getElementById('audio-btn');
    const audioOnIcon = document.getElementById('audio-on-icon');
    const audioOffIcon = document.getElementById('audio-off-icon');
    const audioStatus = document.getElementById('audio-status');
    const audioStatusText = document.getElementById('audio-status-text');
    const backgroundAudio = document.getElementById('background-audio');
    
    let isPlaying = false;
    let hasInteracted = false;
    
    // Check if user has interacted with the page before
    const audioConsent = localStorage.getItem('wmg-audio-consent');
    
    function showStatus(message) {
      audioStatusText.textContent = message;
      audioStatus.classList.remove('opacity-0');
      setTimeout(() => {
        audioStatus.classList.add('opacity-0');
      }, 2000);
    }
    
    function toggleAudio() {
      if (!hasInteracted) {
        // First interaction - start playing
        backgroundAudio.volume = 0.3; // Set to 30% volume
        backgroundAudio.play().then(() => {
          isPlaying = true;
          hasInteracted = true;
          localStorage.setItem('wmg-audio-consent', 'true');
          updateUI();
          showStatus('Audio On');
          trackAudioEvent('play', 'background_music');
        }).catch((error) => {
          console.log('Audio play failed:', error);
          showStatus('Audio unavailable');
        });
      } else {
        // Subsequent interactions - toggle
        if (isPlaying) {
          backgroundAudio.pause();
          isPlaying = false;
          showStatus('Audio Off');
          trackAudioEvent('pause', 'background_music');
        } else {
          backgroundAudio.play();
          isPlaying = true;
          showStatus('Audio On');
          trackAudioEvent('play', 'background_music');
        }
        updateUI();
      }
    }
    
    function updateUI() {
      if (isPlaying) {
        audioOnIcon.classList.remove('hidden');
        audioOffIcon.classList.add('hidden');
        audioBtn.classList.add('bg-wmg-gold', 'text-wmg-bg');
        audioBtn.classList.remove('bg-wmg-bg/80');
      } else {
        audioOnIcon.classList.add('hidden');
        audioOffIcon.classList.remove('hidden');
        audioBtn.classList.remove('bg-wmg-gold', 'text-wmg-bg');
        audioBtn.classList.add('bg-wmg-bg/80');
      }
    }
    
    // Auto-start audio if user has previously consented
    if (audioConsent === 'true') {
      setTimeout(() => {
        backgroundAudio.volume = 0.3;
        backgroundAudio.play().then(() => {
          isPlaying = true;
          hasInteracted = true;
          updateUI();
          trackAudioEvent('play', 'background_music_auto');
        }).catch((error) => {
          console.log('Auto-play failed:', error);
        });
      }, 1000);
    }
    
    audioBtn.addEventListener('click', toggleAudio);
    
    // Handle audio end
    backgroundAudio.addEventListener('ended', () => {
      backgroundAudio.currentTime = 0;
      backgroundAudio.play();
    });
    
    // Handle page visibility changes
    document.addEventListener('visibilitychange', () => {
      if (document.hidden && isPlaying) {
        backgroundAudio.pause();
      } else if (!document.hidden && isPlaying) {
        backgroundAudio.play();
      }
    });
  });
</script>

<style>
  #audio-toggle button {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }
  
  #audio-toggle button:hover {
    transform: scale(1.05);
    box-shadow: 0 6px 20px rgba(212, 175, 55, 0.3);
  }
  
  @media (prefers-reduced-motion: reduce) {
    #audio-toggle button {
      transition: none;
    }
    
    #audio-toggle button:hover {
      transform: none;
    }
  }
</style>
