---
// Schedule component with gatherings list and JSON-LD structured data

const gatherings = [
  {
    date: "2024-10-28",
    time: "16:00",
    endTime: "17:30",
    title: "The Gift of Man in todays fast changing world - being of service to the whole"
  },
  {
    date: "2024-11-25", 
    time: "16:00",
    endTime: "17:30",
    title: "The Siddhis of Manhood, our highest becoming"
  },
  {
    date: "2024-12-30",
    time: "16:00", 
    endTime: "17:30",
    title: "The wholesome man- integrating our shadows, gifts and Siddhis into everyday life"
  },
  {
    date: "2025-01-27",
    time: "16:00",
    endTime: "17:30", 
    title: "Bringing our highest vision into form - envisioning  the year ahead"
  }
];

const jsonLd = {
  "@context": "https://schema.org",
  "@type": "Organization",
  "name": "The Whole Men Gathering",
  "url": "https://wholemengathering.org",
  "event": gatherings.map(gathering => ({
    "@type": "Event",
    "name": gathering.title,
    "description": gathering.title,
    "startDate": `${gathering.date}T${gathering.time}:00+00:00`,
    "endDate": `${gathering.date}T${gathering.endTime}:00+00:00`,
    "eventStatus": "https://schema.org/EventScheduled",
    "eventAttendanceMode": "https://schema.org/OnlineEventAttendanceMode",
    "location": {
      "@type": "VirtualLocation",
      "url": "https://wholemengathering.org"
    },
    "organizer": {
      "@type": "Organization", 
      "name": "The Whole Men Gathering"
    }
  }))
};
---

<section aria-labelledby="gatherings" class="relative py-20 px-6 bg-wmg-bg overflow-hidden">
  <!-- Organic background shading -->
  <div class="absolute inset-0 bg-gradient-to-tl from-wmg-bg via-wmg-bg/95 to-wmg-bg/90"></div>
  
  <!-- Animated gradient flares -->
  <div class="absolute top-1/3 right-0 w-72 h-72 bg-gradient-radial from-wmg-gold/6 via-wmg-gold/3 to-transparent rounded-full blur-3xl animate-float"></div>
  <div class="absolute bottom-1/4 left-0 w-64 h-64 bg-gradient-radial from-wmg-gold/8 via-wmg-gold/4 to-transparent rounded-full blur-3xl animate-float-delayed"></div>
  <div class="absolute top-1/2 left-1/3 w-48 h-48 bg-gradient-radial from-wmg-gold/4 via-wmg-gold/2 to-transparent rounded-full blur-2xl animate-float-slow"></div>
  
  <!-- Subtle noise texture -->
  <div class="absolute inset-0 opacity-[0.015] bg-noise-pattern"></div>
  
  <!-- Gradient mesh overlay -->
  <div class="absolute inset-0 bg-gradient-to-br from-transparent via-wmg-gold/[0.015] to-transparent"></div>
  
  <div class="relative max-w-4xl mx-auto px-4 sm:px-6">
    <h2 id="gatherings" class="text-2xl sm:text-3xl md:text-4xl lg:text-5xl font-bold text-wmg-text mb-4 sm:mb-6 text-center section-title">
      Explore and join our next meetings
    </h2>
    
    <p class="text-lg sm:text-xl md:text-2xl text-wmg-text/80 mb-6 sm:mb-8 text-center section-subtitle">
      every last tuesday of the month, 4:00 - 5:30 pm UTC.
    </p>
    
    <!-- Next Meeting Section -->
    <div class="mb-8 sm:mb-12 text-center">
      <h3 class="text-xl sm:text-2xl font-semibold text-wmg-gold mb-6">
        Next meeting
      </h3>
      <div class="flex justify-center">
        <div class="custom-time-widget">
          <div class="time-display">
            <div class="utc-time">
              <span class="time-value">4:00 PM - 5:30 PM</span>
              <span class="time-label">UTC Time</span>
              <span class="timezone-info-small">Tue, Oct 28 2025</span>
            </div>
            <div class="divider"></div>
            <div class="local-time">
              <span class="time-value" id="local-time">--:-- - --:--</span>
              <span class="time-label">Your Time</span>
              <span class="timezone-info-small" id="local-date">--</span>
            </div>
            <div class="divider"></div>
            <div class="countdown-section">
              <span class="countdown-label">STARTS IN</span>
              <div class="countdown-time">
                <span class="countdown-days" id="countdown-days">--</span>
                <span class="countdown-text">days</span>
              </div>
              <div class="countdown-details" id="countdown-details">
                <span id="countdown-hours">--</span> hours, <span id="countdown-minutes">--</span> minutes
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <ul class="space-y-6 sm:space-y-8">
      {gatherings.map((gathering, index) => (
        <li class={`gathering-item gathering-${index + 1} border-l-4 border-wmg-gold pl-4 sm:pl-6 py-3 sm:py-4`}>
          <time 
            datetime={`${gathering.date}T${gathering.time}:00+00:00`}
            class="block text-base sm:text-lg md:text-xl font-semibold text-wmg-gold mb-2"
          >
            {new Date(gathering.date).toLocaleDateString('en-US', { 
              month: 'long', 
              day: 'numeric',
              year: 'numeric'
            })}
          </time>
          <h3 class="text-base sm:text-lg md:text-xl lg:text-2xl xl:text-3xl text-wmg-text leading-relaxed">
            {gathering.title}
          </h3>
        </li>
      ))}
    </ul>
  </div>
</section>

<script type="application/ld+json" set:html={JSON.stringify(jsonLd)}></script>

    <script>
      // Time widget functionality
      function initTimeWidget() {
        // Meeting date: October 28, 2025 at 4:00 PM UTC
        const meetingDate = new Date('2025-10-28T16:00:00Z');
        
        // Cache for timezone info
        let detectedTimezone = null;
        
        // Function to detect timezone from IP
        async function detectTimezoneFromIP() {
          try {
            // Use a free timezone detection service
            const response = await fetch('https://worldtimeapi.org/api/ip');
            const data = await response.json();
            
            if (data.timezone) {
              detectedTimezone = data.timezone;
              console.log('Detected timezone from IP:', detectedTimezone);
              return detectedTimezone;
            }
          } catch (error) {
            console.log('IP timezone detection failed, falling back to browser timezone:', error);
          }
          
          // Fallback to browser timezone
          detectedTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
          console.log('Using browser timezone:', detectedTimezone);
          return detectedTimezone;
        }
        
        function updateTimeDisplay() {
          const now = new Date();
          
          // Create meeting times as UTC dates - these are the source times
          const meetingStartUTC = new Date('2025-10-28T16:00:00.000Z');
          const meetingEndUTC = new Date('2025-10-28T17:30:00.000Z');
          
          // Use detected timezone or browser timezone
          const timezone = detectedTimezone || Intl.DateTimeFormat().resolvedOptions().timeZone;
          
          // Convert to local time using the detected timezone
          const localStartTimeString = meetingStartUTC.toLocaleTimeString('en-US', {
            hour: '2-digit',
            minute: '2-digit',
            hour12: false,
            timeZone: timezone
          });
          
          const localEndTimeString = meetingEndUTC.toLocaleTimeString('en-US', {
            hour: '2-digit',
            minute: '2-digit',
            hour12: false,
            timeZone: timezone
          });
          
          const localDateString = meetingStartUTC.toLocaleDateString('en-US', {
            weekday: 'short',
            month: 'short',
            day: 'numeric',
            year: 'numeric',
            timeZone: timezone
          });
          
          // Update local time display
          const localTimeElement = document.getElementById('local-time');
          const localDateElement = document.getElementById('local-date');
          
          console.log('Timezone conversion:', {
            utcTime: '16:00-17:30',
            localStartTimeString,
            localEndTimeString,
            localDateString,
            detectedTimezone: timezone,
            browserTimezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
            elementsFound: {
              localTimeElement: !!localTimeElement,
              localDateElement: !!localDateElement
            }
          });
          
          if (localTimeElement) {
            localTimeElement.textContent = `${localStartTimeString} - ${localEndTimeString}`;
          }
          
          if (localDateElement) {
            localDateElement.textContent = localDateString;
          }
      
      // Calculate countdown
      const timeDiff = meetingDate.getTime() - now.getTime();
      
      if (timeDiff > 0) {
        const days = Math.floor(timeDiff / (1000 * 60 * 60 * 24));
        const hours = Math.floor((timeDiff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));
        
        // Update countdown display
        const daysElement = document.getElementById('countdown-days');
        const hoursElement = document.getElementById('countdown-hours');
        const minutesElement = document.getElementById('countdown-minutes');
        
        if (daysElement) daysElement.textContent = days;
        if (hoursElement) hoursElement.textContent = hours;
        if (minutesElement) minutesElement.textContent = minutes;
      } else {
        // Meeting has passed
        const daysElement = document.getElementById('countdown-days');
        const detailsElement = document.getElementById('countdown-details');
        
        if (daysElement) daysElement.textContent = '0';
        if (detailsElement) detailsElement.textContent = 'Meeting has started';
      }
    }
    
        // Initialize timezone detection and then update display
        async function initializeWidget() {
          await detectTimezoneFromIP();
          updateTimeDisplay();
        }
        
        // Initialize when DOM is ready or immediately if already loaded
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', initializeWidget);
        } else {
          initializeWidget();
        }
        
        // Update every minute
        setInterval(updateTimeDisplay, 60000);
      }

      // Initialize when DOM is ready or immediately if already loaded
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initTimeWidget);
      } else {
        initTimeWidget();
      }
</script>

<style>
  /* Organic floating animations */
  @keyframes float {
    0%, 100% {
      transform: translateY(0px) translateX(0px) scale(1);
    }
    33% {
      transform: translateY(-20px) translateX(10px) scale(1.05);
    }
    66% {
      transform: translateY(10px) translateX(-5px) scale(0.95);
    }
  }
  
  @keyframes floatDelayed {
    0%, 100% {
      transform: translateY(0px) translateX(0px) scale(1);
    }
    33% {
      transform: translateY(15px) translateX(-10px) scale(0.95);
    }
    66% {
      transform: translateY(-10px) translateX(5px) scale(1.05);
    }
  }
  
  .animate-float {
    animation: float 8s ease-in-out infinite;
  }
  
  .animate-float-delayed {
    animation: floatDelayed 10s ease-in-out infinite 2s;
  }
  
  .animate-float-slow {
    animation: floatSlow 12s ease-in-out infinite;
  }
  
  /* Gradient radial utility */
  .bg-gradient-radial {
    background: radial-gradient(circle at center, var(--tw-gradient-stops));
  }
  
  /* Noise pattern background */
  .bg-noise-pattern {
    background-image: 
      radial-gradient(circle at 1px 1px, rgba(255,255,255,0.15) 1px, transparent 0);
    background-size: 20px 20px;
  }
  
  @keyframes floatSlow {
    0%, 100% {
      transform: translateY(0px) translateX(0px) scale(1);
    }
    25% {
      transform: translateY(-15px) translateX(8px) scale(1.02);
    }
    50% {
      transform: translateY(-8px) translateX(-5px) scale(0.98);
    }
    75% {
      transform: translateY(12px) translateX(3px) scale(1.01);
    }
  }
  
  /* Section animations */
  .section-title {
    opacity: 0;
    transform: translateY(30px) scale(0.95);
    animation: sectionTitleReveal 1s ease-out 0.2s forwards;
  }
  
  .section-subtitle {
    opacity: 0;
    transform: translateY(20px);
    animation: sectionSubtitleReveal 0.8s ease-out 0.4s forwards;
  }
  
  .gathering-item {
    opacity: 0;
    transform: translateX(-30px);
    transition: all 0.6s ease-out;
  }
  
  /* Custom time widget styling */
  .custom-time-widget {
    background: rgba(245, 245, 240, 0.05);
    border: 2px solid rgba(212, 175, 55, 0.3);
    border-radius: 12px;
    padding: 20px;
    width: 100%;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    backdrop-filter: blur(10px);
  }
  
  .time-display {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 16px;
  }
  
  .utc-time, .local-time {
    flex: 1;
    text-align: center;
  }
  
  .countdown-section {
    flex: 1.2;
    text-align: center;
    background: rgba(212, 175, 55, 0.1);
    border-radius: 8px;
    padding: 12px;
  }
  
  .time-value {
    display: block;
    font-size: 1.25rem;
    font-weight: bold;
    color: #d4af37;
    margin-bottom: 4px;
    font-family: 'Manrope', sans-serif;
  }
  
  .time-label {
    display: block;
    font-size: 0.875rem;
    color: #f5f5f0;
    opacity: 0.8;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    margin-bottom: 2px;
  }
  
  .timezone-info-small {
    display: block;
    font-size: 0.75rem;
    color: #f5f5f0;
    opacity: 0.6;
  }
  
  .divider {
    width: 2px;
    height: 60px;
    background: linear-gradient(to bottom, transparent, #d4af37, transparent);
    margin: 0 8px;
  }
  
  .countdown-label {
    display: block;
    font-size: 0.75rem;
    color: #f5f5f0;
    opacity: 0.7;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    margin-bottom: 4px;
  }
  
  .countdown-time {
    margin-bottom: 4px;
  }
  
  .countdown-days {
    font-size: 1.5rem;
    font-weight: bold;
    color: #f5f5f0;
    font-family: 'Cormorant Garamond', serif;
  }
  
  .countdown-text {
    font-size: 0.875rem;
    color: #f5f5f0;
    opacity: 0.8;
    margin-left: 4px;
  }
  
  .countdown-details {
    font-size: 0.75rem;
    color: #f5f5f0;
    opacity: 0.7;
    font-family: 'Manrope', sans-serif;
  }
  
  /* Mobile responsive */
  @media (max-width: 640px) {
    .time-display {
      flex-direction: column;
      gap: 12px;
    }
    
    .divider {
      width: 60px;
      height: 2px;
      background: linear-gradient(to right, transparent, #d4af37, transparent);
      margin: 0 auto;
    }
    
    .time-value {
      font-size: 1.125rem;
    }
    
    .countdown-days {
      font-size: 1.25rem;
    }
    
    .custom-time-widget {
      padding: 16px;
    }
    
    .countdown-section {
      padding: 10px;
    }
  }
  
  .gathering-1 {
    animation: gatheringReveal 0.8s ease-out 0.6s forwards;
  }
  
  .gathering-2 {
    animation: gatheringReveal 0.8s ease-out 0.8s forwards;
  }
  
  .gathering-3 {
    animation: gatheringReveal 0.8s ease-out 1s forwards;
  }
  
  .gathering-4 {
    animation: gatheringReveal 0.8s ease-out 1.2s forwards;
  }
  
  @keyframes sectionTitleReveal {
    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }
  
  @keyframes sectionSubtitleReveal {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  @keyframes gatheringReveal {
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }
  
  /* Respect reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .animate-float,
    .animate-float-delayed {
      animation: none;
    }
    
    .section-title,
    .section-subtitle,
    .gathering-item {
      animation: none;
      opacity: 1;
      transform: none;
    }
  }
</style>
