---
// SignupForm component with Formspree integration
---

<section id="signup" aria-labelledby="join" class="relative py-20 sm:py-24 px-4 sm:px-6 bg-wmg-bg overflow-hidden">
  <!-- Enhanced background with subtle effects -->
  <div class="absolute inset-0">
    <!-- Gradient overlay for depth -->
    <div class="absolute inset-0 bg-gradient-to-br from-wmg-gold/[0.03] via-transparent to-wmg-gold/[0.05]"></div>
    
    <!-- Animated gradient orbs -->
    <div class="absolute top-1/4 left-1/4 w-64 h-64 bg-gradient-radial from-wmg-gold/6 via-wmg-gold/3 to-transparent rounded-full blur-3xl animate-float"></div>
    <div class="absolute bottom-1/3 right-1/4 w-48 h-48 bg-gradient-radial from-wmg-gold/4 via-wmg-gold/2 to-transparent rounded-full blur-2xl animate-float-delayed"></div>
    
    <!-- Subtle noise texture -->
    <div class="absolute inset-0 opacity-[0.01] bg-noise-pattern"></div>
  </div>
  
  <div class="relative max-w-2xl mx-auto">
    <h2 id="join" class="text-2xl sm:text-3xl md:text-4xl font-bold text-wmg-text mb-8 sm:mb-10 text-center fade-up">
      Join our forming community and participate in the live online gatherings:
    </h2>
    
    <!-- Form container with subtle card effect -->
    <div class="bg-wmg-bg/50 backdrop-blur-sm border border-wmg-gold/20 rounded-2xl p-6 sm:p-8 shadow-2xl shadow-wmg-gold/10 fade-up">
      <form 
        class="space-y-6"
        action={`https://formspree.io/f/${import.meta.env.PUBLIC_FORMSPREE_ID || 'your-formspree-id'}`}
        method="POST"
        id="signup-form"
      >
      <!-- Honeypot field -->
      <input 
        type="text" 
        name="_gotcha" 
        style="display: none" 
        tabindex="-1" 
        autocomplete="off"
        aria-hidden="true"
      />
      
      <div class="space-y-4">
        <div>
          <label for="name" class="block text-wmg-text font-medium mb-2 text-sm sm:text-base">
            Name
          </label>
          <input
            type="text"
            id="name"
            name="name"
            required
            class="w-full px-4 py-3 sm:py-4 bg-wmg-text/10 border border-wmg-text/20 rounded-lg text-wmg-text placeholder-wmg-text/50 focus:outline-none focus:ring-2 focus:ring-wmg-gold focus:border-transparent transition-colors text-base min-h-[44px]"
            placeholder="Your full name"
            aria-describedby="name-error"
          />
          <div id="name-error" class="text-red-400 text-sm mt-1 hidden" role="alert"></div>
        </div>
        
        <div>
          <label for="email" class="block text-wmg-text font-medium mb-2 text-sm sm:text-base">
            Email
          </label>
          <input
            type="email"
            id="email"
            name="email"
            required
            class="w-full px-4 py-3 sm:py-4 bg-wmg-text/10 border border-wmg-text/20 rounded-lg text-wmg-text placeholder-wmg-text/50 focus:outline-none focus:ring-2 focus:ring-wmg-gold focus:border-transparent transition-colors text-base min-h-[44px]"
            placeholder="your.email@example.com"
            aria-describedby="email-error"
          />
          <div id="email-error" class="text-red-400 text-sm mt-1 hidden" role="alert"></div>
        </div>
      </div>
      
      <button
        type="submit"
        class="w-full bg-gradient-to-r from-wmg-gold to-wmg-gold/90 text-wmg-bg px-6 sm:px-8 py-4 sm:py-5 text-base sm:text-lg font-bold rounded-xl hover:from-wmg-gold/90 hover:to-wmg-gold focus:outline-none focus:ring-4 focus:ring-wmg-gold/50 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed min-h-[48px] shadow-lg hover:shadow-xl hover:shadow-wmg-gold/25 transform hover:scale-[1.02] active:scale-[0.98]"
        id="submit-btn"
      >
        <span id="submit-text" class="flex items-center justify-center gap-2">
          <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
          </svg>
          Join Our Community
        </span>
        <span id="submit-loading" class="hidden flex items-center justify-center gap-2">
          <svg class="animate-spin w-5 h-5" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          Joining...
        </span>
      </button>
      
      <!-- Success/Error messages -->
      <div id="form-message" class="text-center mt-4 hidden" role="alert" aria-live="polite"></div>
      </form>
    </div>
  </div>
</section>

<script>
  import { trackFormEvent, trackButtonClick } from '../lib/analytics.ts';
  
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('signup-form') as HTMLFormElement;
    const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement;
    const submitText = document.getElementById('submit-text') as HTMLElement;
    const submitLoading = document.getElementById('submit-loading') as HTMLElement;
    const formMessage = document.getElementById('form-message') as HTMLElement;
    const nameInput = document.getElementById('name') as HTMLInputElement;
    const emailInput = document.getElementById('email') as HTMLInputElement;
    const nameError = document.getElementById('name-error') as HTMLElement;
    const emailError = document.getElementById('email-error') as HTMLElement;

    function showError(input: HTMLInputElement, errorElement: HTMLElement, message: string) {
      input.classList.add('border-red-400');
      errorElement.textContent = message;
      errorElement.classList.remove('hidden');
    }

    function clearError(input: HTMLInputElement, errorElement: HTMLElement) {
      input.classList.remove('border-red-400');
      errorElement.classList.add('hidden');
    }

    function showMessage(message: string, isError = false) {
      formMessage.textContent = message;
      formMessage.className = `text-center mt-4 ${isError ? 'text-red-400' : 'text-wmg-gold'}`;
      formMessage.classList.remove('hidden');
    }

    function hideMessage() {
      formMessage.classList.add('hidden');
    }

    // Real-time validation
    nameInput.addEventListener('blur', function() {
      if (this.value.trim().length < 2) {
        showError(this, nameError, 'Name must be at least 2 characters');
      } else {
        clearError(this, nameError);
      }
    });

    emailInput.addEventListener('blur', function() {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(this.value)) {
        showError(this, emailError, 'Please enter a valid email address');
      } else {
        clearError(this, emailError);
      }
    });

    // Track form start when user begins typing
    let formStarted = false;
    [nameInput, emailInput].forEach(input => {
      input.addEventListener('input', () => {
        if (!formStarted) {
          formStarted = true;
          trackFormEvent('start', 'signup_form');
        }
      });
    });

    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      hideMessage();
      
      trackFormEvent('submit', 'signup_form', {
        has_name: nameInput.value.trim().length > 0,
        has_email: emailInput.value.trim().length > 0
      });

      // Clear previous errors
      clearError(nameInput, nameError);
      clearError(emailInput, emailError);

      // Basic validation
      let hasErrors = false;
      if (nameInput.value.trim().length < 2) {
        showError(nameInput, nameError, 'Name must be at least 2 characters');
        hasErrors = true;
      }
      
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(emailInput.value)) {
        showError(emailInput, emailError, 'Please enter a valid email address');
        hasErrors = true;
      }

      if (hasErrors) return;

      // Show loading state
      submitBtn.disabled = true;
      submitText.classList.add('hidden');
      submitLoading.classList.remove('hidden');

      try {
        const formData = new FormData(form);
        const response = await fetch(form.action, {
          method: 'POST',
          body: formData,
          headers: {
            'Accept': 'application/json'
          }
        });

        if (response.ok) {
          showMessage('Welcome to the gathering! You\'ll receive the live link and updates soon.');
          form.reset();
          trackFormEvent('submit', 'signup_form', { status: 'success' });
        } else {
          throw new Error('Form submission failed');
        }
      } catch (error) {
        showMessage('Something went wrong. Please try again.', true);
        trackFormEvent('error', 'signup_form', { error: 'submission_failed' });
      } finally {
        // Reset button state
        submitBtn.disabled = false;
        submitText.classList.remove('hidden');
        submitLoading.classList.add('hidden');
      }
    });
  });
</script>

<style>
  .fade-up {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.6s ease-out, transform 0.6s ease-out;
  }
  
  .fade-up.reveal {
    opacity: 1;
    transform: translateY(0);
  }
  
  /* Gradient radial utility */
  .bg-gradient-radial {
    background: radial-gradient(circle at center, var(--tw-gradient-stops));
  }
  
  /* Noise pattern background */
  .bg-noise-pattern {
    background-image: 
      radial-gradient(circle at 1px 1px, rgba(255,255,255,0.15) 1px, transparent 0);
    background-size: 20px 20px;
  }
</style>
